find drivers/staging -name TODO

perl scripts/checkpatch.pl -f drivers/staging/android/* | less


---------------------------------------------------------------------------------------------------------------------------------------------
drivers/staging/comedi/comedidev.h
---------------------------------------------------------------------------------------------------------------------------------------------
WARNING: Prefer 'unsigned int' to bare use of 'unsigned'
#176: FILE: drivers/staging/comedi/comedidev.h:176:
+       unsigned runflags;

WARNING: Prefer 'unsigned int' to bare use of 'unsigned'
#569: FILE: drivers/staging/comedi/comedidev.h:569:
+struct comedi_device *comedi_dev_get_from_minor(unsigned minor);


diff --git a/drivers/staging/comedi/comedidev.h b/drivers/staging/comedi/comedidev.h
index 1158072..dcb6376 100644
--- a/drivers/staging/comedi/comedidev.h
+++ b/drivers/staging/comedi/comedidev.h
@@ -173,7 +173,7 @@ struct comedi_subdevice {
 
        void *lock;
        void *busy;
-       unsigned runflags;
+       unsigned int runflags;
        spinlock_t spin_lock;   /* generic spin-lock for COMEDI and drivers */
 
        unsigned int io_bits;
@@ -566,7 +566,7 @@ struct comedi_device {
 
 void comedi_event(struct comedi_device *dev, struct comedi_subdevice *s);
 
-struct comedi_device *comedi_dev_get_from_minor(unsigned minor);
+struct comedi_device *comedi_dev_get_from_minor(unsigned int minor);
 int comedi_dev_put(struct comedi_device *dev);
 
 bool comedi_is_subdevice_running(struct comedi_subdevice *s);




---------------------------------------------------------------------------------------------------------------------------------------------
If data is shared between bottom half process context:
needs to use spinlock & disable of bottom halves

If data is shared, interrupt handler might preempt a bottom half:
need to obtain appropriate lock and disable interrupts

- spin_lock_bh()
- spin_unlock_bh()


Two tasklets of the same type do not ever run simultaneously.
Thus, there is no neeed to protect data used only within a single type of tasklet.
If data is shared between the two tasklets, however you must obtain a normal spin lock before accessing the data in the bottom half
Tasklet never preempts another running tasklet on the same processsor, no need to disable bottom halves. 


With softirqs, regardless of whether it is the same softirq type, if data is shared by softirqs, it must be protected with a lock. 
Recall that softirqs, even two of the same type, might run simultaneously on multiple processors in the system.
Softirq never preempts another softirq running on the same processor, no need to disable bottom halves.

---------------------------------------------------------------------------------------------------------------------------------------------
Reader-Writer Spin Locks:
- Writing demands mutual exclusion
- Multiple concurrent readers are safe so long as there are no writers
- Reader-writer spin locks provide separate reader and writer variants of the lock
- One or more readers can concurrently hold the reader lock.
- The writer lock - can be held by at most one writer with no concurrent readers.
- Reader/writer locks -> shared/exclusive -> concurrent/exclusive locks 
- because the lock is available in a shared (for readers) and an exclusive (for writers) form.
- Usage is similar to spin locks
DEFINE_RWLOCK(mr_rwlock);
Then, in the reader code path:
read_lock(&mr_rwlock);
/* critical section (read only) ... */ 
read_unlock(&mr_rwlock);

Finally, in the writer code path:
write_lock(&mr_rwlock);
/* critical section (read and write) ... */ 
write_unlock(&mr_lock);








