######## 2 ############
Interrupt handler:

- The kernel is in process context when executing on behalf of a process.
- The kernel is in Interrupt context when executing an interrupt handler.

- In the process context the 'current' macro points to the associated task.
- Since the process is coupled to the kernel in the process context, process context can sleep or otherwise invoke the scheduler

- Since you cannot call any functions that might sleep from the interrupt handler, it limits the functions that one can call.


-->The setup of an interrupt handler's stack is a configuration option.
- IH shared the stack of the process that they interrupted.
- The kernel stack is 2 pages in size ~8KB in 32bit, ~16KB in 64bit.
- Since they share, IH had to be furgal.

- Earlier in 2.6 kernel, an option was added to reduce the stack size from 2 pages down 1 page ~ 4KB in 32bit, ~8KB in 64bit.
- Since this reduces the memory pressure. 
- However to cope with the reduced stack size, interrupt handlers were given their own stack 1 page in size, Interrupt stack.



As soon as an interrupt signal is received on a particular pin on a processor, the processor jumps to a unique location in a memory and executes the code present there. In this manner the kernel knows the IRQ number of the incoming interrupt.
after saving the data of the current process in the stack, do_IRQ() is called.

usigned int do_IRQ (stuct pt_regs_ regs)
On PC -> mask_and_ack_8259A()

do_IRQ() ensures that a valid IH is registered on the line adn that it is enabled and not currently executing. if so calls handle_IRQ_event(), defined in kernel/irq/handler.c, to rrun the installed interrupt handlers for the line



cat /proc/interrupts

initial assembly routines are located in arch/x86/kernel/entry_64.s
c arch/c86/kernel/irq.c
fs/proc
/proc/interrupts show_interrupts()

Procfs is a virtual file system that exists only in the kernel memory mounted at /proc


the local_irq_dsiable routine is dangerous if interrupts were already dsiabled prior to it's invocation
The corresponding call unconditioanlly enables interrupts, dispite the fact they were off to begin with.
local_irq_save(flags);

local_irq_restore(flags);



!Contention
- Contention describes a lock currently in use but that another thread is trying to acquire.
- Highlt contented lock often has threads waiting for it.
- Highly contented locks then become bottle neck in the system










! Memory Management!

i. 		Getting pages
ii. 	Getting Zeroed pages
iv. 	Freeing Pages

- 	one low leve mechanism for requesting memory,
- 	Several interfaces to access it.
- 	Interfaces allocate memory with page-sized granularity <linux/gfp.h>

- 	'struct page* alloc_pages(gfp_t gfp_mask, unsigned int order)' -> 2^order 
		contiguous physical pages
-	'void * page_address(struct page *page)'
- 	'unisgned long __get_free_pages(gfp_t gfp_mask, unsigned int order)'
-	works the same as alloc_pages(), except, returns logical address of the 
	first requested page.
-	If only one page is required,
	'struct page* alloc_page(gfp_t gfp_mask)'
	'unsigned long __get_free_page(gfp_t gfp_mask)'
-	same but pass zero for the order (2^0=1 page)

- 	zero Pages
	
	'unsigned long get_zeroed_page(unsinged int gfp_mask)'
	same as __get_free_page(), except - every byte is unset.



- 	'alloc_page(gfp_mask)' 			Allocates a single page, returns a pointer  
									to its
- 	'alloc_pages(gfp_mask,order)' 	Allocates 2 order pages, returns a pointer 
									to the first page’s page structure
- 	'__get_free_page(gfp_mask)' 	Allocates a single page, returns a 
									pointer to its logical address
-	'__get_free_pages(gfp_mask,' 	Allocates 2 order pages, returns a pointer 
									to the first page’s logical address
-	'get_zeroed_page(gfp_mask)'		Allocates a single page, zero its contents 
									and returns a pointer to its logical address

Freeing Pages:

-	'void __free_pages(struct page *page, unsigned int order)'
-	'void free_pages(unsigned long addr, unsigned int order)'
-	'void free_page(unsigned long addr)'

-	These interfaces -> allocating page-sized chunks of physically contiguous 
	pages.
-	byte-sized allications, kernel provides kmalloc()


-	'void * kmalloc(size_t size, gfp_t flags)'
-	on error returns NULL

!FLAGS!

- 	gfp_type -> <linux/types.h> as an unsigned int.
-	'gfp' stands for __get_free_pages()
-	flags are broken into 3:
	i.		action modifiers
	ii.		zone modifiers
	iii.	types

- Action modifiers	
-	<linux/gfp.h>
-	file <linux/slab.h>

__GFP_WAIT 		The allocator can sleep.
__GFP_HIGH 		The allocator can access emergency pools.
__GFP_IO 		The allocator can start disk I/O.
__GFP_FS 		The allocator can start filesystem I/O.
__GFP_COLD 		The allocator should use cache cold pages.
__GFP_NOWARN 	The allocator does not print failure warnings.
__GFP_REPEAT 	The allocator repeats the allocation if it fails, but the 
				allocation can potentially fail.
__GFP_NOFAIL 	The allocator indefinitely repeats the allocation.The allocation
				cannot fail.
__GFP_NORETRY 	The allocator never retries if the allocation fails.
__GFP_NOMEMALLOC The allocator does not fall back on reserves.
__GFP_HARDWALL 	The allocator enforces “hardwall” cpuset boundaries.
__GFP_RECLAIMABLE The allocator marks the pages reclaimable.
__GFP_COMP 		The allocator adds compound page metadata (used internally
				by the hugetlb code).


-	ptr = kmalloc(size, __GFP_WAIT | __GFP_IO | __GFP_FS);


!High Memory Mappings!

-	Pages in high memory might not be permanently mapped into the kernel’s
	address space.
-	Thus, pages obtained via alloc_pages() with the __GFP_HIGHMEM flag
	might not have a logical address.

!Per-CPU Data at Compile Time!

The header <linux/percpu.h> declares all the routines.You can find the actual defini-
tions there, in mm/slab.c , and in <asm/percpu.h> .


-	DEFINE_PER_CPU(type, name);
-	get_cpu_var()
-	put_cpu_var()

-	get_cpu_var(name)++;	/* increment name on this processor */
-	put_cpu_var(name);		/*done; enable kernel preemption */
-	per_cpu(name, cpu)++;	/* increment name on the given processor */


!Per-CPU Data at Runtime!

void *alloc_percpu(type); 					/* a macro */
void *__alloc_percpu(size_t size, size_t align);
void free_percpu(const void *);
